version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  install-awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-nodejs:
    description: Install Node.js
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install-ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deploy]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deploy

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deploy]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deploy

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deploy]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deploy]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deploy]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deploy]
      - run:
          name: Scan bacnk-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1 \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1 \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["6c:5c:0c:b5:73:b9:8e:ec:33:8c:96:87:f2:07:08:68"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 
            
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                echo 'Migrated successfully'
                curl https://kvdb.io/YJZDQS1RCjqDfGYreYSPXA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
              else:
                echo 'Migration failed'
                curl https://kvdb.io/YJZDQS1RCjqDfGYreYSPXA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      #- destroy_environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install python3
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> frontend/.env
            cat frontend/.env
            export API_URL=http://34.201.14.179:3030
            echo $API_URL
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            ls -la
            cat .env
            export API_URL=http://34.201.14.179:3030
            echo $API_URL
            npm install      
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-9c58490 --recursive

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:      
      - checkout       
      - add_ssh_keys:
          fingerprints: ["6c:5c:0c:b5:73:b9:8e:ec:33:8c:96:87:f2:07:08:68"]
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install --upgrade pip
            pip3 install awscli
        
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/*/*/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cp package* ./dist
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml    
      #- destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      #- image: cimg/base:stable
      - image: amazon/aws-cli
    steps:
      - checkout
      #- install-awscli
      #- install-nodejs
      - run: 
          name: Install curl
          command: |
            yum install -y curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s ${API_URL}/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"

            echo ${URL}
            
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      #- destroy-environment
      #- revert-migrations

  cloudfront-update:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - install-awscli
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name InitialStack \
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
             --tags project=udapeople
          echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
      - destroy-environment
  
  cleanup:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - install-awscli
      - run:
          name: Fetch old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # fetch all stacks names   
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo Stack names: "${STACKS[@]}"    
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            echo "=============delete confirmed======================="
            aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
            echo "==============didn't delete========================"
            echo "no stacks found"
            fi

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
          #requires: [build-frontend]
      #- test-backend:
          #requires: [build-backend]
      #- scan-backend:
          #requires: [build-backend]
      #- scan-frontend:
          #requires: [build-frontend]
      #- deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [devuda3]
      - configure-infrastructure:
          #requires: [deploy-infrastructure]
      - run-migrations
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]
      #- deploy-backend
          #requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]