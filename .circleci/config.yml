  version: 2.1

  commands:
    destroy_environment:
      steps:
        - run:
            name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
            when: on_fail
            command: |
              echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
              aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        # Add parameter here     
      steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/YJZDQS1RCjqDfGYreYSPXA/migration_${CIRCLE_WORKFLOW_ID:0:7})
              if(( $SUCCESS==1 )); 
              then
              echo "Reverting Back"
              cd ~/project/backend
              npm install
              npm run migration:revert
              fi
            
  jobs:
    build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-deploy]
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm install
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-deploy

    build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-deploy]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-deploy

    test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-deploy]
        - run:
            name: Front-end Unit Test
            command: |
              cd frontend
              npm install
              npm run test

    test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-deploy]
        - run:
            name: Back-end Unit Test
            command: |
              cd backend
              npm install
              npm run test
  
    scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-deploy]
        - run:
            name: Scan front-end
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical

    scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-deploy]
        - run:
            name: Scan bacnk-end
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical

    deploy-infrastructure:
      docker:
        - image:  amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --tags project=udapeople \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"                  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy_environment

    configure-infrastructure:
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["6c:5c:0c:b5:73:b9:8e:ec:33:8c:96:87:f2:07:08:68"]
        # attach workspace
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk add curl
              apk add openssh-client
              pip install awscli
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible 
              ansible-playbook -i inventory.txt configure-server.yml 
        - slack/notify:
            event: fail
            template: basic_fail_1 
        - destroy_environment
  
    run-migrations:
      docker:
        # Docker image here that supports NodeJS
        - image: cimg/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        - attach_workspace:
            at: .
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt 
              
        - run:
            name: Send migration results to memstash
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                  echo 'Migrated successfully'
                  curl https://kvdb.io/YJZDQS1RCjqDfGYreYSPXA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
                else:
                  echo 'Migration failed'
                  curl https://kvdb.io/YJZDQS1RCjqDfGYreYSPXA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
        #- destroy_environment 

    deploy-frontend:
      docker:
        # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum -y install python3
              curl -sL https://rpm.nodesource.com/setup_16.x | bash -
              yum -y install nodejs tar gzip
        - run:
            name: Get backend url
            command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm run build
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
        - revert-migrations

    deploy-backend:
      docker:
        - image: python:3.11-rc-alpine
      steps:      
        - checkout       
        - add_ssh_keys:
            fingerprints: ["6c:5c:0c:b5:73:b9:8e:ec:33:8c:96:87:f2:07:08:68"]
        - attach_workspace:
            at: ~/      
        - run:
            name: Install dependencies
            command: |
              apk add --update tar gzip ansible nodejs npm curl
              pip3 install --upgrade pip
              pip3 install awscli
         
        - run:
            name: Deploy backend
            command: |
              cd backend
              npm i
              npm run build
              echo ENVIRONMENT=production > ".env"
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_ENTITIES=./src/modules/domain/*/*/*.entity.ts >> ".env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
              cp package* ./dist
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        #- destroy_environment
        ##- revert-migrations

    smoke-test:
      docker:
        # Lightweight Docker image 
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              # your code here
              yum install -y curl
        - run:
            name: Backend Smoke Test
            command: |
              # your code here
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              sleep 120
              echo "${API_URL}"
              if curl -s "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
        - destroy-environment
        - revert-migrations

    cloudfront-update:
        docker:
          # Docker image here that supports AWS CLI
          - image: amazon/aws-cli
        steps:
          - checkout
          # Checkout code from git
          - run:
              name: Install dependencies
              command: |
                # your code here
                yum install -y curl
          - run:
              name: Update cloudfront distribution
              command: |
                aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
                echo workflow id: "${CIRCLE_WORKFLOW_ID:0:7}"
          #- destroy-environment  

    cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum install -y curl
        - run:
            name: Fetch old stack workflow id
            command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # fetch all stacks names   
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              
              echo Stack names: "${STACKS[@]}"    
              
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
              echo "=============delete confirmed======================="
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
              echo "==============cannot cleanup========================"
              echo "no stacks found"
              fi
  workflows:
    udapeople_project:
      jobs:
        - build-frontend          
        - build-backend:            
           requires: [build-frontend]
        - test-backend:            
            requires: [build-backend]
        - scan-frontend:         
            requires: [test-frontend]
        - scan-backend:
            requires: [test-backend]
        - deploy-infrastructure:
            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
            filters:
             branches:
                only: [devuda3]
        #- configure-infrastructure
            #requires: [deploy-infrastructure]
        #- run-migrations
            #requires: [configure-infrastructure]
        #- deploy-frontend
            #requires: [run-migrations]
        #- deploy-backend:
            #requires: [run-migrations]
        ##- smoke-test:
            #requires: [deploy-backend, deploy-frontend]
        #- cloudfront-update
         #   requires: [smoke-test]
        #- cleanup:
            #requires: [cloudfront-update]